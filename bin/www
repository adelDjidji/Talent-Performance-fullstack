#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('backend2:server');
var http = require('http');
// const socketIo = require("socket.io");
// const axios = require("axios");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3008');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = require('../app').server// http.createServer(app);

/** 
 * SocketIO implementation
 */
// // const io = socketIo(server); // < Interesting!

// const getApiAndEmit = async socket => {
//   try {
//     const res = await axios.get(
//       "http://localhost:3007/notification/user/3"
//     ); // Getting the data from DarkSky
//     console.log("emit ..")
//     socket.emit("FromAPI4", res.data); // Emitting a new message. It will be consumed by the client
//   } catch (error) {
//     console.error(`Error: ${error.code}`);
//   }
// };
// let interval;

// io.on("connection", socket => {
//   console.log("New client connected");
//   if (interval) {
//     clearInterval(interval);
//   }
//   interval = setInterval(() => getApiAndEmit(socket), 5000);
//   socket.on("new_notif", (data) => {
//     console.log("data=",data)
//     socket.emit("new_notif_"+data, "testing");
//     console.log(" new notif emiting", data)
//   });
//   socket.on("test", (data) => {
//     console.log("data test=",data)
//     socket.emit("test_resp", "testing response");
//   });
//   socket.on("disconnect", () => {
//     console.log("Client disconnected");
//   });
// });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
